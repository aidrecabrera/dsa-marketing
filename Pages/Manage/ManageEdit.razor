@page "/manage/edit/{transactionId:int}"
@using Aneta.Models
@using Aneta.Data
@using Aneta.PdfServices.Immutables
@using Aneta.PdfServices.Templates
@using QuestPDF.Fluent
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Components;
@using System;
@using System.IO;
@using System.Net.Http.Headers
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc.Formatters
@using Microsoft.JSInterop

<div class="flex flex-col w-full h-full">
    <div>
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    </div>
    <div class="flex flex-row h-full w-full gap-4">
        <div class="flex flex-col w-1/3 h-full text-black text-2xl gap-4">
            <MudCard Elevation="0" Outlined="true" Class="p-7 text-black w-full">
                <MudCardContent Class="flex flex-col gap-3 text-black">
                    <MudTextField T="string" Label="Punong Barangay" HelperTextOnFocus="true" Variant="Variant.Outlined" @bind-Value="_currentTransactionDocument.PunongBarangayName"/>
                    <MudTextField T="string" Label="Barangay Treasurer" HelperTextOnFocus="true" Variant="Variant.Outlined" @bind-Value="_currentTransactionDocument.BarangayTreasurerName"/>
                </MudCardContent>
            </MudCard>
            <MudCard Elevation="0" Outlined="true" Class="p-7 w-full">
                <MudCardContent Class="flex flex-col gap-3">
                    <MudTextField T="string" Label="Punong Barangay" HelperTextOnFocus="true" Variant="Variant.Outlined" @bind-Value="_currentTransactionDetail.MunicipalityName"/>
                    <MudTextField T="string" Label="Barangay Treasurer" HelperTextOnFocus="true" Variant="Variant.Outlined" @bind-Value="_currentTransactionDetail.BarangayName"/>
                </MudCardContent>
            </MudCard>
            <MudPaper Elevation="0" Outlined="true" Class="w-full">
                <MudList>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>All Documents</h1>
                            <div>
                                <button class="btn btn-sm text-white bg-info hover:bg-info w-20">Print</button>
                            </div>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Purchase Order</h1>
                            <button class="btn btn-sm text-white bg-info hover:bg-info w-20" @onclick="() => _printPurchaseOrder()">Print</button>
                        
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Inspection and Acceptance Report</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Abstract of Quotation</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Purchase Request</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Acknowledgment Receipt</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Disbursement Voucher</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Canvas Form</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListItem>
                        <div class="flex flex-row justify-between items-center">
                            <h1>Requisition and Issue Slip</h1>
                            <button class="btn btn-sm text-white bg-info hover-bg-info w-20">Print</button>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                </MudList>
            </MudPaper>
        </div>
        <MudTable Elevation="0" MultiSelection="true" @bind-SelectedItems="multiSelectedItems" Class="w-2/3 h-[85vh] p-4" Items="@_currentTransactionItems" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<TransactionItem, bool>(FilterFunc)"
                  @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="@(() => EditRow())" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                  RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Transaction Items</MudText>
                <MudSpacer/>
                <MudSpacer/>
                <MudSpacer/>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 w-1/12"></MudTextField>
                <div class="pl-2 items-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(AddNewItem)">Add</MudButton>
                </div>
                <div class="pl-2 items-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(DeleteNewItem)">Delete</MudButton>
                </div>
            </ToolBarContent>
            <ColGroup>
                @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
                {
                    <col style="width:5px;"/>
                }
                <col style="width:5%;"/>
                <col style="width:10%;"/>
                <col style="width:15%;"/>
                <col style="width:40%;"/>
                <col/>
                @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
                {
                    <col style="width:10%;"/>
                }
            </ColGroup>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.DocumentId)">ID</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.UnitName)">Unit Name</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.Particulars)">Particulars</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.Quantity)">Quantity</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.Cost)">Cost</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<TransactionItem, object>(x => x.Amount)">Amount</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                <MudTd DataLabel="Unit Name">@context.UnitName</MudTd>
                <MudTd DataLabel="Particulars">@context.Particulars</MudTd>
                <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Cost">@context.Cost</MudTd>
                <MudTd DataLabel="Amount">@context.Amount</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="ID">@context.ItemId</MudTd>
                <MudTd DataLabel="Unit Name">
                    <MudTextField @bind-Value="@context.UnitName" Required/>
                </MudTd>
                <MudTd DataLabel="Particulars">
                    <MudTextField @bind-Value="@context.Particulars" Required/>
                </MudTd>
                <MudTd DataLabel="Quantity">
                    <MudNumericField @bind-Value="@context.Quantity" Required Min="1"/>
                </MudTd>
                <MudTd DataLabel="Cost">
                    <MudNumericField @bind-Value="@context.Cost" Required Min="1"/>
                </MudTd>
                <MudTd DataLabel="Amount">
                    <MudTextField @bind-Value="@context.Amount" ReadOnly="true"/>
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
            </EditButtonContent>
        </MudTable>
    </div>
</div>

@code {
    private readonly PurchaseOrderTemplate _purchaseOrderTemplate = new PurchaseOrderTemplate();
    private void _printPurchaseOrder()
    {
        TransactionInfo transactionInfo = new TransactionInfo
        {
            Barangay = _currentTransactionDetail.BarangayName,
            Municipality = _currentTransactionDetail.MunicipalityName,
            PunongBarangay = _currentTransactionDocument.PunongBarangayName,
            BarangayTreasurer = _currentTransactionDocument.BarangayTreasurerName,
            Supplier = "DSA Marketing",
            Address = "Poblacion, San Jose, Occidental Mindoro",
            DeliveryDate = DateTime.Now.ToString(),
            DeliveryPlace = "Poblacion, San Jose, Occidental Mindoro",
            Province = "Davao del Sur",
            Po = _currentTransactionDocument.DocumentId.ToString(),
            Tin = "000-000-000-000",
            TermDelivery = "30 Days",
            TermPayment = "n/6 n/12",
            TotalAmount = _currentTransactionItems?.Sum(x => x.Price)
        };
        var document = _purchaseOrderTemplate.DsaTemplate(transactionInfo, _currentTransactionItems!);
        document.GeneratePdf("Hello PDF");
    }
}

@code {
    private IEnumerable<TransactionItem> Elements = new List<TransactionItem>();
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private TransactionItem selectedItem1 = null;
    private TransactionItem elementBeforeEdit;
    private HashSet<TransactionItem> selectedItems1 = new HashSet<TransactionItem>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private HashSet<TransactionItem> multiSelectedItems = new HashSet<TransactionItem>();

    private void AddNewItem()
    {
        if (_currentTransactionItems != null)
        {
            var parameters = new DialogParameters<ManageEditAddDialog> { { x => x.documentId, documentId } };
            DialogService.Show<ManageEditAddDialog>("Add", parameters);
        }
        _currentTransactionItems = UnitOfWork?.TransactionItems.Find(x => x.DocumentId == transactionId);
        StateHasChanged();
    }

    private void EditRow()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        Snackbar.Add("Item Information Edited", Severity.Success);
    }

    private void DeleteNewItem()
    {
        try
        {
            UnitOfWork?.TransactionItems.RemoveRange(multiSelectedItems);
            UnitOfWork?.Complete();
            StateHasChanged();
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
            Snackbar.Add("Item/s Deleted", Severity.Error);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void UpdateDatabase(TransactionItem item)
    {
        UnitOfWork?.TransactionItems.Update(item);
        UnitOfWork?.Complete();
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            UnitName = ((TransactionItem)element).UnitName,
            Particulars = ((TransactionItem)element).Particulars,
            Price = ((TransactionItem)element).Price,
            Quantity = ((TransactionItem)element).Quantity,
            Amount = ((TransactionItem)element).Amount
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Transaction {((TransactionItem)element).DocumentId}");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((TransactionItem)element).UnitName = elementBeforeEdit.UnitName;
        ((TransactionItem)element).Particulars = elementBeforeEdit.Particulars;
        ((TransactionItem)element).Price = elementBeforeEdit.Price;
        ((TransactionItem)element).Quantity = elementBeforeEdit.Quantity;
        ((TransactionItem)element).Amount = elementBeforeEdit.Amount;
        AddEditionEvent($"RowEditPreview event: made a backup of Transaction {((TransactionItem)element).DocumentId}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        UpdateDatabase((TransactionItem)element);
        AddEditionEvent($"RowEditCommit event: Changes to Transaction {((TransactionItem)element).DocumentId} committed");

        _currentTransactionItems = UnitOfWork?.TransactionItems.Find(x => x.DocumentId == transactionId);

        ClearEventLog();
        selectedItem1 = null;
        AddEditionEvent($"RowEditCommit event: Changes to Transaction {((TransactionItem)element).DocumentId} committed");
    }

    private bool FilterFunc(TransactionItem individualItem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (individualItem.UnitName != null && individualItem.UnitName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (individualItem.Particulars != null && individualItem.Particulars.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{individualItem.DocumentId} {individualItem.Price} {individualItem.Quantity} {individualItem.Amount}".Contains(searchString))
            return true;
        return false;
    }

}

@code {
    [Parameter]
    public int? transactionId { get; set; }
    public int? documentId { get; set; }
    [Inject]
    private DsaClusterContext? Context { get; set; }
    [Inject]
    private UnitOfWork? UnitOfWork { get; set; }
    private List<BreadcrumbItem> _items;
    private TransactionDetail _currentTransactionDetail;
    private TransactionDocument _currentTransactionDocument;
    IEnumerable<TransactionItem>? _currentTransactionItems;
    protected override void OnInitialized()
    {
        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Transaction", href: "manage"),
            new BreadcrumbItem("#" + transactionId, href: null, disabled: true)
        };
        UnitOfWork = new UnitOfWork(Context);
        _currentTransactionDetail = UnitOfWork.TransactionDetails.Find(x => x.TransactionId == transactionId).FirstOrDefault();
        _currentTransactionDocument = UnitOfWork.TransactionDocuments.Find(x => x.DocumentId == transactionId).FirstOrDefault();
        _currentTransactionItems = UnitOfWork.TransactionItems.Find(x => x.DocumentId == transactionId);
        documentId = _currentTransactionItems.FirstOrDefault()?.DocumentId;
    }
}